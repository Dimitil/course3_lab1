#include "myRect.h"
#include "myString.h"
#include "bochka.h"
#include <iostream>


#define stop __asm nop

int main()
{
using namespace std;

	//Задание 1.Объявление класса. Создание экземпляра класса.
	//Вызов методов класса. 
	//Откройте закладку Class View - (здесь Вы увидите имена методов и
	//данных - классов Rect и MyString)
	//Обратите внимание на пиктограммы слева от имен членов класса - они
	//обозначают спецификатор доступа к каждому члену класса.

	//	Какой конструктор вызывается при создании экземпляра класса?
	{
		std::cout << "\nZadanie#1\n";
		Rect rect(-1);
		stop         //default-конструктор
	}

	//1a. Объявите и определите конструктор с параметрами для
	//инициализации переменных класса. Создайте экземляры класса Rect
	//с помощью конструктора с параметрами. Если компилятор выдает
	//ошибку в предыдущем фрагменте, подумайте - чего ему не
	//хватает? Добейтесь отсутствия ошибок.
	//Выполняя задание с самого начала по шагам, определите:
	//в какой момент происходит вызов конструктора(какого?)?

	//Замечание*: хорошо было бы учесть тот факт, что прямоугольник
	//может оказаться "ненормализованным", то есть m_left>m_right или/и
	//m_top>m_bottom

	//Подсказка: учтите, что пользователь Вашего класса может указывать
	//в качестве параметров любые значения! Например:
	std::cout << "\nZadanie#1.a\n";

	Rect rrr(4,3,2,1);
	

	stop
		//1б. При конструировании объекта посредством конструктора без параметров
		//предусмотрите инициализацию переменных класса, например, нулем

	Rect nnnn;

	std::cout << "\nZadanie#1.b\n";
	
	stop
	//1в. Объявите, определите и вызовите метод класса InflateRect(), 
	//который увеличивает размеры прямоугольника на заданные приращения
	//(раздвигая стороны от центра - каждую сторону на свое значение).
	//Подсказка: объявить и определить методы можно не только "вручную",
	//но и с помощью Wizard-a Class View. Для этого: откройте закладку
	//ClassView окна проекта, сделайте активным класс Rect и нажмите
	//правую кнопку мыши - в появившемся контекстном меню выберите
	//Add/Add Member Function... С помощью появившейся диалоговой панели
	//"дайте указания" Wizard-у как объявить и определить метод.
	{
	std::cout << "\nZadanie#1.v\n";
	Rect TestRect;
	TestRect.InflateRect(2,3,4,5);

	
	stop
	}

	//Задание 2.Перегрузка конструкторов и методов класса.
	//Конструктор копирования.

	//2а.Объявите и определите конструктор копирования в классе Rect.
	//Выполняя задание по шагам, определите, какой
	//конструктор вызывается при создании r1,r2,r3 и r4?
	//Чему равны переменные созданных объектов?
		std::cout << "\nZadanie#2.a\n";
		Rect r1;				//defaul-конструктор (0 0 0 0)
		Rect r2(1,2,3,4);		//defaul-конструктор (1 2 3 4)
		Rect r3 = r1;			//copy-конструктор   (0 0 0 0)
		Rect r4(r2);			//copy-конструктор   (1 2 3 4)	
		stop


  //2б. Объявите и определите в классе Rect метод InflateRect(),
	//который принимает два аргумента, по умолчанию равных 1, и 
	//раздвигает стороны прямоугольника на заданные приращения.
	//Для каких объектов вызывается функция InflateRect()?
		std::cout << "\nZadanie#2.b\n";

		r1.InflateRect(1,1);	
		r2.InflateRect(2,2);		//для объектов перед селектором - "."
	//Какая из функций InflateRect() вызывается в каждом из трех случаев?
		r3.InflateRect(2,2,2,2);	//c 4-мя параметрами
		r3.InflateRect(3,3);
		r3.InflateRect(5);			// все остальные 3 случая для 2-х параметров (с default-значениями)
		r3.InflateRect();
		stop


	
	//Задание 3.Спецификаторы доступа. Инкапсуляция. 
	{
	std::cout << "\nZadanie#3\n";
	Rect r;
	//Раскомментируйте следующую строку. Объясните ошибку
	//компилятора

	//int tmp = r.m_left; // член - закрытый . Приватный.  Доступен только через методы класса



	//Введите в класс Rect метод void SetAll(...),
	//который присваивают переменным класса передаваемые
	//значения. Вызовите созданный метод, проверьте корректность. 
	
	r.SetAll(4,5,3,2);

	//Введите в класс Rect парный метод GetAll(&), через аргументы достать
	//который "достает" значения private-переменных класса.
	//Вызовите созданный метод, проверьте корректность. 
	int x1, y1, x2, y2;

	r.GetAll(x1, y1, x2, y2);									


	stop
	}


	//Задание 4.Передача экземпляра класса в качестве параметра
	//функции. Возвращение объекта класса по значению. Поставив
	//остановы в конструкторе копирования или выполняя фрагмент
	//по шагам, определите: в какой момент происходит обращение
	//к конструктору копирования. 
	//Создайте глобальную функцию 
	// Rect BoundingRect(Rect, Rect);
	//которая принимает два объекта класса Rect по значению и
	//возвращает объект класса Rect, который является прямоугольником,
	//в который вписаны заданные прямоугольники. Как происходит
	//передача параметров и возвращение объекта класса?



	{
		std::cout << "\nZadanie#4\n";
		Rect r1(1,2,3,4), r2(5,6,7,8),r3;
		r3= BoundingRect(r1, r2);		//передача через копирующий конструктор. Возврат через default.
			
	stop
	
	//Задание 4а. Передача объектов по ссылке.
	//Создайте глобальную функцию BoundingRect2, которая выполняет ту же
	//задачу, принимая параметры по ссылке
	//Вызываются ли конструкторы при передаче параметров?
	
	std::cout << "\nZadanie#4a\n";
	r3 = BoundingRect2(r1, r2);		//	конструкторы при передаче параметров не вызываются
	stop
	

	//Задание 4б.Реализуйте ту же задачу (BoundingRect) методом класса
	std::cout << "\nZadanie#4b\n";
	r3.BoundingRect(r1, r2);
	}


	//Задание 5. Когда вызываются конструкторы и деструкторы.
	//Объявите и определите
	//явный деструктор класса. Поставьте остановы в 
	//конструкторе (конструкторах) и деструкторе. Определите: когда для
	//каждого из объектов вызывается конструктор, а когда - деструктор?
	{
		std::cout << "\nZadanie#5\n";
		Rect r1;
		Rect*	pR = new Rect(1,2,1,2);	
		{
			Rect r2(r1);//copy
			Rect arRect[2];//def

			for(int i=0; i<3; i++)
			{
				static Rect r3 (i,i,i,i) ; //def
				Rect r4(*pR);//copy
				Rect r5(i,i,i,i);//
			}
		}
		delete pR;	//	
		stop
	}


	//Задание 6.Конструктор + деструктор = функциональное
	// замыкание. Класс MyString
	// Посредством конструктора (конструкторов) и деструктора обеспечьте
	//корректные инициализацию и деактивацию объекта
	//C помощью остановов определите когда происходит
	//захват и освобождение памяти для строки-члена класса
	{
		std::cout << "\nZadanie#6\n";
		MyString	str("It's my string!");
		//Создайте метод GetString(), который обеспечит доступ к хранящейся строке.
		//С помощью cout и метода GetString() распечатайте строку объекта str
		std::cout<<str.GetString();
		
		//Замечание: подумайте, как следует корректно реализовать метод GetString().

		//...
	}
	stop


	//6a. Раскомментируйте следующий фрагмент. Подумайте - какие
	//неприятности Вас ожидают. Попробуйте исправить положение (как?)
		{
			std::cout << "\nZadanie#6a\n";

			MyString str1("The first string!");
			MyString str2 = str1;	//поверхностное копирование. Нужен копирующий конструктор
		}
		stop

		//6б. Реализуйте метод SetNewString, который будет заменять строку
		// на новую


	{
	std::cout << "\nZadanie#6b\n";

	MyString str1("FIRSTTESTSTRING");
	str1.SetNewString("SECOND");
	std::cout << str1.GetString();
	}






	//Задание 7.  Решите с помощью классов следующую задачу:
	//даны две бочки известного объема. В одной бочке в начальный момент
	//времени содержится спирт (96%), в другой – вода.
	//Кружкой емкостью 1л переливаем итеративно содержимое из одной бочки
	//в другую следующим способом: на каждой итерации
	//зачерпнули из первой бочки -> вылили во вторую
	//зачерпнули из второй бочки -> вылили в первую.
	//Требуется определить номер итерации, на которой концентрация спирта в
	//первой бочке станет меньше 50%.

	//Bochka spirt(...);
	//Bochka water(...);
	//...
	//	while(концентрация спирта в бочке spirt > 50%)
	//	{
	//		spirt.Pereliv(water); //или spirt.Pereliv(water, объем_кружки);
	//		water.Pereliv(spirt); // аналогично
	//		...

	//	}

	std::cout << "\nZadanie#7\n";

	bochka WithSpirt(100, 0.96);
	bochka WithWater(100, 0.0);

	int i = 0;
	while (WithSpirt.getC_spirt() > 0.5)
	{
		WithSpirt.pereliv(WithWater);
		WithWater.pereliv(WithSpirt);
		i++;
	}
	std::cout <<"Answer: need "<< i <<" iteracii.";
	std::cout << WithWater.getC_spirt();
	
	return 0;

}//end_main

